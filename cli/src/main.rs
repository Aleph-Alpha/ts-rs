#![warn(clippy::pedantic, clippy::nursery)]

use std::{fs, io::Write};

use clap::Parser;
use color_eyre::{owo_colors::OwoColorize, Result};

mod args;
mod cargo;
mod metadata;
mod path;

use args::Args;
use metadata::{Metadata, FILE_NAME};

const NOTE: &[u8; 109] = b"// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.\n";

fn main() -> Result<()> {
    color_eyre::install()?;

    let args = Args::parse();

    let metadata_path = args.output_directory.join(FILE_NAME);
    if metadata_path.exists() {
        fs::remove_file(&metadata_path)?;
    }

    cargo::invoke(&args)?;

    let metadata_content = fs::read_to_string(&metadata_path)?;
    let metadata = Metadata::new(&metadata_content)?;

    if args.generate_index_ts {
        if metadata.has_naming_collisions() {
            metadata.report_naming_collisions();

            eprintln!(
                "{} due to the naming collisions listed above, generating an index.ts file is not possible",
                "Error:".red().bold()
            );

            return Ok(());
        }

        if !metadata.is_empty() {
            let index_path = args.output_directory.join("index.ts");

            if index_path.exists() {
                fs::remove_file(&index_path)?;
            }

            let mut index = fs::OpenOptions::new()
                .create(true)
                .append(true)
                .open(index_path)?;

            index.write_all(NOTE)?;

            for file in metadata.export_paths() {
                index.write_fmt(format_args!("\nexport * from {file:?};"))?;
            }
        }
    }

    Ok(())
}
